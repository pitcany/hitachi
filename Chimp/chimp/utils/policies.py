import numpy as np

from chimp.utils.distributions import *

#################################################################
# Implements DQN controllers
#################################################################


class DQNPolicy():
    """
    Class that handles policies generated by the DQN
    """

    def __init__(self, learner):
        self.learner = learner

    def action(self, obs):
        """
        Returns the actions with the highes Q value given observation obs
        """
        q_vals = self.learner.forward(obs)
        return np.argmax(q_vals)


class StochasticDQNPolicy():
    """
    Generates actions stochastically according to Q-vals
    Network output is turned into probs using softmax
    """

    def __init__(self, learner, seed=None):
        self.learner = learner
        self.rng = np.random.RandomState(seed)

    def action(self, obs):
        """
        Returns the action according to probs generated by taking softmax over Qs 
        """
        q_vals = self.learner.forward(obs)
        q_probs = softmax(q_vals)
        return categorical(q_probs[0], self.rng)


class EpsGreedyPolicy():
    """
    Epsilon greedy policy
    """

    def __init__(self, policy, n_actions, eps, seed=None):
        self.polciy = policy
        self.n_actions = n_actions
        self.eps = eps
        self.rng = np.random.RandomState(seed)

    def action(self, obs):
        if self.rng.rand() < self.eps:
            return self.rng.randint(self.n_actions) 
        else:
            return self.policy.action(obs)


class RandomPolicy():

    # constructor
    def __init__(self, n_actions, rng = np.random.RandomState()):
        self.rng = rng
        self.n_actions = n_actions

    def action(self, obs):
        return self.rng.randint(self.n_actions) 


class OneStepLookAhead():

    # constructor
    def __init__(self, simulator, n_rollouts=100):
        self.simulator = simulator

    def action(self, obs):
        # run each action n_rollouts times, take the highest average
        pass


class SingleAction():
    """
    Dummy single action policy
    """

    def __init__(self, a):
        self.a = a

    def action(self, obs):
        return self.a
